-- Advanced API loader

-- Purpose:
--   same as bios.lua API loader
--     load lua file as API
--     install global symbols under API name
--   additions
--     enable dependencies between APIs via requireApi("APIname")
--     allow apis to reject being loaded (e.g. turtle/computer) by returning false
--     returns api for assignment to local variable

local apiPaths
local apiTable
local apiLoading = {}
local apiLoaded = {}
local apiInstalled = {}
local apiCurrent
local apiIncludeOriginal = {}
local apiUseTable = {}

local function installApi(name, env)
  local api = {}
  if apiUseTable[name] then
    api = apiUseTable[name]
  else
    for k,v in pairs(env) do
      api[k] =  v
    end
  end
  if apiIncludeOriginal[name] then
    for k,v in pairs(_G[name]) do
      if api[k] then error("conflict with existing API entry "..k) end
      api[k] =  v
    end
  end
  --rawset(_G, name, api)
  apiInstalled[name] = api
  --print("installing API "..name)
end

local function loadApiFromFile(name, path)
  local env = setmetatable({}, {__index = _G})
  local func, parseError = loadfile(path)
  if not func then error(parseError) end
  setfenv(func, env)
  local result = func()
  if result==nil then return env
  elseif result==false then return nil end
  error("Unexpected return value from API "..name)
end

local function loadApi(name, path)
  if apiLoaded[name] then return end
  if apiLoading[name] then
    error("API "..name.." is required by "..apiCurrent.." which is being loaded indirectly by "..name" forming an unresolvable cycle.")
  end

  local apiContext = apiCurrent
  apiLoading[name] = true
  apiCurrent = name

  --local success, result = pcall(loadApiFromFile, name, path)
  local success, result = true, loadApiFromFile(name, path)
  if not success then print("Error loading API "..name..": "..result)
  elseif result then installApi(name, result) end

  apiLoaded[name] = true
  apiLoading[name] = nil
  apiCurrent = apiContext
end

function includeOriginalApi()
  apiIncludeOriginal[apiCurrent] = true
end

function installAsApi(api)
  apiUseTable[apiCurrent] = api
end

function requireApi(name)
  local path = apiTable[name]
  if not path then
    error("API "..name.." required by "..apiCurrent.." does not exist")
  end
  loadApi(name, path)
  local api = apiInstalled[name]
  if not api then
    error("Required API "..name.." did not load properly.")
  end
  return api
end

require = {}
local rqvt = {}
function rqvt:__index(key)
  return requireApi(key)  
end
function rqvt:__newindex()
  error("can not overwrite apis")
end
setmetatable(require, rqvt)

local function scanApiDir(apis, directory)
  local files = fs.list(directory)
  for i, file in ipairs(files) do
    if string.sub(file, 1, 1) ~= "." then
      local path = fs.combine(directory, file)
      if not fs.isDir(path) then
        apis[file] = path
      end
    end
  end
end

function setApiPaths(paths)
  apiPaths = paths
  local apis = {}
  for i, path in ipairs(paths) do
    scanApiDir(apis, path)
  end
  apiTable = apis
end

function loadAllApis()
  for name, path in pairs(apiTable) do
    loadApi(name, path)
  end
end

function initializeApis()
  setApiPaths{"rom/apis/advanced"}
  loadAllApis()
end
