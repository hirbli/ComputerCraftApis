-- Position of Computer Relative to Coordinate System

-- Purpose:
--   Tracks the current position and orientation of the computer (or turtle).
--   The position and orientation is expressed in the form of a
--   linear transformation between the computer relative coordinates and
--   reference coordinates:
--      vReference = tPosition:apply(vRelative)
--   where tPosition is the transformation and vRelative and vReference
--   are vectors in the relative and reference coordinate system.
--   For explanation of relative coordinate system see diagrams below.
--   The reference coordinate system is initialized to be the same
--   as the relative coordinate system, but stays in place while
--   the turtle moves.
--   If a better reference coordinate system becomes available (e.g. via
--   galileo), the reference can be exchanged.

-- Todo:
--   coordinate system abstraction with conversion from one to other
--   abstraction of direction

local persist = loader.requireApi("persistency")
local tx = loader.requireApi("transformation")


-- Relative Coordinate System ------------------------------------------

-- Turtle seen from above:
--                 (1, 0, 0)
--                side=front
--              turtle.forward()
--
--  (0, 0, -1)     (0, 0, 0)      (0, 0, 1)
--   side=left      Turtle        side=right
--    Pickaxe                       Modem
--
--                side=back
--              turtle.back()
--                (-1, 0, 0)
--
--               Player when
--             placing turtle

-- Computer seen from above:
--
--                 (1, 0, 0)
--                side=back
--
--  (0, 0, -1)     (0, 0, 0)      (0, 0, 1)
--   side=left    Computer        side=right
--
--                side=front
--                 screen
--                (-1, 0, 0)
--
--               Player when
--             placing computer


-- Sides of Turtle and Computer as Vectors --------------------------------

local frontBack = -1
if turtle then frontBack = 1 end

sideVectors = {
  front = vector.new(frontBack, 0, 0),
  back = vector.new(-frontBack, 0, 0),
  top = vector.new(0, 1, 0),
  bottom = vector.new(0, -1, 0),
  left = vector.new(0, 0, 1),
  right = vector.new(0, 0, -1)
}


-- Position Logic ---------------------------------------------------------

--local myID = os.getComputerID()
local initialLocation = {pos=tx.identity, moving=false}
local location = persist:new("position", initialLocation)
location.value.pos = tx:newFromTable(location.value.pos)
if location.value.moving then
  print("Position was changing during shutdown, resetting.")
  location.value = initialLocation
  -- reset other ???
end
location:store()

-- Movement -----------------------------------------------------------

local moveTx = nil

function startMoving(transformation)
  location.value.moving = true
  location:store()
  moveTx = transformation
end

function stopMoving(success)
  location.value.moving = false
  if success then
    location.value.pos = location.value.pos:concat(moveTx)
    moveTx = nil
  end
  location:store()
end

function getCurrent()
  return location.value.pos:apply(vector.new(0,0,0))
end

function getDirection()
  return location.value.pos.turn
end

function getTransformation()
  return location.value.pos
end

__lunit = {}

function __lunit.path()
  location.value = initialLocation
  local fw = tx:move(vector.new(1, 0, 0))
  startMoving(fw)
  stopMoving(false)
  startMoving(fw)
  stopMoving(true)
  lunit.areEqual(fw, location.value.pos)
  startMoving(tx:turn(1))
  stopMoving(true)
  startMoving(fw)
  stopMoving(true)
  lunit.areEqual(vector.new(1, 0, -1), getCurrent())
  lunit.areEqual(vector.new(1, 0, -2), location.value.pos:apply(vector.new(1, 0, 0)))
  lunit.areEqual(1, getDirection())
end
