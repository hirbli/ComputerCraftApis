-- GPS Plus

-- Purpose:
--   Provide GPS services based on minet with the following features:
--   Different coordinate systems
--     global = equal to minecraft coordinates
--     regional = valid for a region, specifically set up by user
--     local = local to computer starting at 0, 0, 0 (useful for turtles)
--   Announcing position to neighbors
--   Upgrade of coordinate data to best available coordinate system
--   Simplified setup of global and regional cordinate systems using gpsplus service program

-- GPS messages: {cs={<cst>, <id>}, pos={<x>,<y>,<z>}}
--   cs = coordinate system
--      cst = coordinate system type: "g"=global/"r"=regional/"l"=local
--      id = computerID to make regional and local coordinate systems unique, nil otherwise
--   pos = coordinates (x, y, z)

-- Todo:
--   timeout of fixes
--   coordinate system abstraction with conversion from one to other
--   regional coordinates
--   abstraction of direction
--   interface for position changes (turtle)

local minet = loader.requireApi("minet")
local persist = loader.requireApi("persistency")


fixes = {}

local function addFix(fix)
  table.insert(fixes, fix)
end


-- begin stolen from gps

local function trilaterate( A, B, C )

	local a2b = B.position - A.position
	local a2c = C.position - A.position

	if math.abs( a2b:normalize():dot( a2c:normalize() ) ) > 0.999 then
		return nil
	end

	local d = a2b:length()
	local ex = a2b:normalize( )
	local i = ex:dot( a2c )
	local ey = (a2c - (ex * i)):normalize()
	local j = ey:dot( a2c )
	local ez = ex:cross( ey )

	local r1 = A.distance
	local r2 = B.distance
	local r3 = C.distance

	local x = (r1*r1 - r2*r2 + d*d) / (2*d)
	local y = (r1*r1 - r3*r3 - x*x + (x-i)*(x-i) + j*j) / (2*j)

	local result = A.position + (ex * x) + (ey * y)

	local zSquared = r1*r1 - x*x - y*y
	if zSquared > 0 then
		local z = math.sqrt( zSquared )
		local result1 = result + (ez * z)
		local result2 = result - (ez * z)

		local rounded1, rounded2 = result1:round(), result2:round()
		if rounded1.x ~= rounded2.x or rounded1.y ~= rounded2.y or rounded1.z ~= rounded2.z then
			return result1, result2
		else
			return rounded1
		end
	end
	return result:round()

end

local function narrow( p1, p2, fix )
	local dist1 = math.abs( (p1 - fix.position):length() - fix.distance )
	local dist2 = math.abs( (p2 - fix.position):length() - fix.distance )

	if math.abs(dist1 - dist2) < 0.05 then
		return p1, p2
	elseif dist1 < dist2 then
		return p1:round()
	else
		return p2:round()
	end
end

-- end stolen from gps

function calculatePosition()
  if #fixes < 3 then return nil end
  local p1, p2
  for i=3,#fixes do
    if not p1 then
      p1, p2 = trilaterate( fixes[1], fixes[2], fixes[#fixes] )
	else
      p1, p2 = narrow( p1, p2, tFixes[#fixes] )
	  if not p2 then return p1 end
	end
  end
  return nil
end


-- Position Logic ---------------------------------------------------------

local myID = os.getComputerID()
local initialLocation = {cs={t="l", id=myID}, pos=vector.new(0, 0, 0)}
local location = persist.new("gpsplus", initialLocation)
location:store()

-- Protocol implementation ------------------------------------------------

local proto = "GPS"

local function sendGPS()
  local cs = position.value.cs
  if cs.t=="l" then return end
  local pos = position.value.pos
  minet.sendMessage(minet.bcast, proto, {cs={cs.t, cs.id}, pos={pos.x, pos.y, pos.z}})
end

function setPosition(cstype, csid, pos)
  location.value.cs = {cstype, csid}
  location.value.pos = pos
  location:store()
  sendGPS()
end

local function receiveGPS(header, payload)
  if payload.cs[1]~="g" then return end  -- for now only global coordinate system
  local pos = payload.pos
  local fix = {id=header.src, position=vector.new(pos[1], pos[2], pos[3]), distance = header.distance}
  addFix(fix)
  local myPos = calculatePosition()
  if not myPos then return end
  setPosition("g", 0, myPos)
end


-- Movement -----------------------------------------------------------

function startMoving(moveVector)
  location.value.moving = moveVector
  location:store()
end

function stopMoving(success)
  local moveVector = location.value.moving
  location.value.moving = nil
  if success then location.value.pos = location.value.pos + moveVector end
  location:store()
end

-- Initialization --------------------------------------------------------

minet.receiveProtocol[proto]:add(receiveGPS)
