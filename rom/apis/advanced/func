local iterator = loader.require.iterator

local test = {}
__lunit = test

-- metatable operations as functions

function __add(a, b) return a + b end
function __sub(a, b) return a - b end
function __mul(a, b) return a * b end
function __div(a, b) return a / b end
function __mod(a, b) return a % b end
function __pow(a, b) return a ^ b end
function __unm(a) return -a end

function __concat(a, b) return a..b end
function __len(a) return #a end

function __eq(a, b) return a == b end
function __lt(a, b) return a < b end
function __le(a, b) return a <= b end

-- additions in the spirit of metatable operations

function __neq(a, b) return a ~= b end
function __gt(a, b) return a > b end
function __ge(a, b) return a >= b end

function __and(a, b) return a and b end
function __or(a, b) return a or b end
function __not(a) return not a end

-- other random functions missing elsewhere

function round(a) return math.floor(a+0.5) end


function const(...)
  local c = {...}
  if #c==1 then
    local c1 = c[1]
    return function() return c1 end
  end
  return function() return unpack(c) end
end

function test.const()
  local f = const(7)
  lunit.areEqual(7, f())
  lunit.areEqual(7, f(3))
  local f2 = const(2, 1)
  lunit.areEqual({2, 1}, {f2()})
end

function apply(func, value)
  return function(...)
    return func(value, ...)
  end
end

function test.apply()
  local f = apply(__sub, 4)
  lunit.areEqual(4, f(0))
  lunit.areEqual(3, f(1))
end

function apply2(func, value)
  return function(p1, ...)
    return func(p1, value, ...)
  end
end

function test.apply2()
  local f = apply2(__sub, 4)
  lunit.areEqual(-4, f(0))
  lunit.areEqual(-3, f(1))
end

function concat(f1, f2)
  return function(...) return f1(f2(...)) end
end

function test.concat()
  local f = concat(apply2(__sub, 1), apply2(__sub, 2))
  lunit.areEqual(1, f(4))
  lunit.areEqual(0, f(3))
end

function reduceX(reduceFunction, startValue)
  return function(values)
    local it = type(values)=="function" and values or iterator.ivalues(values)
    local current = startValue
    for v in it do
      current = reduceFunction(current, v)
    end
    return current
  end
end

function test.reduceX()
  local f = reduceX(__add, 1)
  lunit.areEqual(1, f{})
  lunit.areEqual(3, f{2})
  lunit.areEqual(6, f{2, 3})
end

function reduce(reduceFunction)
  return function(values)
    local it = type(values)=="function" and values or iterator.ivalues(values)
    local current = it()
    if current==nil then return end
    for v in it do
      current = reduceFunction(current, v)
    end
    return current
  end
end

function test.reduce()
  local f = reduce(__add)
  lunit.areEqual(nil, f{})
  lunit.areEqual(2, f{2})
  lunit.areEqual(5, f{2, 3})
  lunit.areEqual(10, f(iterator.range(1, 4)))
end

all = reduce(__and)
any = reduce(__or)
sum = reduce(__add)
count = reduceX(function(cnt) return cnt+1 end, 0)

function swap12(func)
  return function(a, b, ...) return func(b, a, ...) end
end
