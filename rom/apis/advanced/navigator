if not turtle then return false end

loader.requireApi'turtleplus'
local turtle = turtle
local vector = vector
local position = loader.require.position
local distmap = loader.require.distmap
local worldmap = loader.require.worldmap

local function multiAnd(func, count)
  for i=1,count do
    if not func() then return false end
  end
  return true
end

local function select(sel, a, b)
  if sel then return a end
  return b
end


function turnTo(targetDir)
  local currentDir = position.getDirection()
  local turns = (4 + targetDir - currentDir) % 4
  if turns==1 then turtle.turnLeft()
  elseif turns==2 then turtle.turnLeft() turtle.turnLeft()
  elseif turns==3 then turtle.turnRight() end
end

function stepHorizontal(turn)
  turnTo(turn)
  return turtle.forward()
end

function step(dir)
  if dir.x ~= 0 then return stepHorizontal(select(dir.x>0, 0, 2)) end
  if dir.y ~= 0 then return select(dir.y>0, turtle.up, turtle.down)() end
  if dir.z ~= 0 then return stepHorizontal(select(dir.z>0, 3, 1)) end
end

local function goLinear(count, step, turn)
  if count==0 then return true end
  if turn then turnTo(turn) end
  return multiAnd(step, math.abs(count))
end

function goto(targetPos)
  local delta = targetPos - position.getCurrent()
  return goLinear(delta.x, turtle.forward, select(delta.x>0, 0, 2)) and
  goLinear(delta.y, select(delta.y>0, turtle.up, turtle.down), nil) and
  goLinear(delta.z, turtle.forward, select(delta.z>0, 3, 1))
end

local function map(v)
  return worldmap.map[v]
end

function find(targetPos)
  local dm = distmap:new(targetPos, map)
  local change = function(v) dm:shrinkTo(v);print('shrink '..dm.size) end
  worldmap.update:add(change)
  while true do
    local pos = position.getCurrent()
    if (targetPos-pos):length() == 0 then break end
    dm:growTo(pos)
    local s = dm:getStep(pos)
print('grow '..dm.size..' step '..tostring(s))
    if not goto(pos-s) then break end
  end
  worldmap.update:remove(change)
end



__lunit = {}
local test = __lunit

function test.goto()
  local target = vector.new(3, 2, 4)
  local res = goto(target)
  lunit.areSame(true, res)
  lunit.areEqual(target, position.getCurrent())
  target = vector.new(1, 1, -3)
  local res = goto(target)
  lunit.areSame(true, res)
  lunit.areEqual(target, position.getCurrent())
end
