-- OS event dispatcher

-- Purpose:
--   Provide a central entity that pulls os events and distributes them
--   to interested parties
--   uses one coroutine per event type, which is started the first time
--   that type is registered

-- NOTE:
-- The dispatcher needs to be run on a thread that receives os events.
-- This can be done by patching bias.lua to call the run() function inside
-- the parallel.waitForAny or noninvasively by calling the dispatcher from
-- a program on the main thread.

-- Todo: test pullEvent()

local event = loader.require.event

allEvents = event:new()
local eventThread = {}

filteredEvents = event:newTable()

function run(filter)
  while true do
    local e, p1, p2, p3, p4, p5 = os.pullEventRaw(filter)
    allEvents:pcall(e, p1, p2, p3, p4, p5)
    filteredEvents[e]:pcall(e, p1, p2, p3, p4, p5)
    if e=="terminate" then break end
  end
end

local waitingForEvent = {}

function pullEvent(filter)
  local thread = coroutine.running()
  waitingForEvent[thread] = filter or true
  local e, p1, p2, p3, p4, p5 = coroutine.yield()
  waitingForEvent[thread] = nil
  return e, p1, p2, p3, p4, p5
end

local function runWaitingThreads(e, p1, p2, p3, p4, p5)
  local wfe = table.clone(waitingForEvent)
  for k, v in pairs(wfe) do
    if v==true or v==e then
      coroutine.resume(k)
    end
  end
end

