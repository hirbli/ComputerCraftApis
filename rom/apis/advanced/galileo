-- Galileo - the European GPS

-- Purpose:
--   Provide "satellite" navigation services based on minet with the following features:
--   Different coordinate systems
--     global = equal to minecraft coordinates
--     regional = valid for a region, specifically set up by user
--     local = local to computer starting at 0, 0, 0 (useful for turtles)
--   Announcing position to neighbors
--   Upgrade of coordinate data to best available coordinate system
--   Simplified setup of global and regional cordinate systems using galileo service program

-- Galileo messages: {cs={<cst>, <id>}, pos={<x>,<y>,<z>}}
--   cs = coordinate system
--      cst = coordinate system type: "g"=global/"r"=regional/"l"=local
--      id = computerID to make regional and local coordinate systems unique, nil otherwise
--   pos = coordinates (x, y, z)

-- Todo:
--   adapt to work with position API
--   test
--   timeout of fixes
--   regional coordinates
--   abstraction of direction


-- Given a triangle with sides of lengths a, b and c,
-- placing c on the x axis starting at the origin, calculate
-- the coordinates p=(x, y) of the meeting point of a and b
-- a = |p| = sqrt(x*x + y*y)              ==> a*a = x*x + y*y
-- b = |p-(c,0)| = sqrt((x-c)(x-c) + y*y) ==> b*b = x*x - 2cx + c*c + y*y
-- subtract ==> a*a - b*b = 2cx - c*c
local function triangle(a, b, c)
  local x = (a*a + c*c - b*b)/(2*c)
  local y2 = x*x - a*a
  if y2<0 then return end
  return x, sqrt(y)
end

local function check(xe, ye, a, b, c)
  local xa, ya = triangle(a, b, c)
  lunit.areSame(xe, xa)
  lunit.areSame(ye, ya)
end

__lunit = {}
local test = __lunit

function test.triangle()
  check(0, 0, 0, 0, 0)

  check(0, 3, 3, 5, 4)
  check(4, 3, 5, 3, 4)
  check(0, 4, 4, 5, 3)
  check(3, 4, 5, 4, 3)

  check(1, 0, 1, 1, 2)
  check(-1, 0, 1, 2, 1)
  check(2, 0, 2, 1, 1)

  check(nil, nil, 3, 1, 1)
  check(nil, nil, 1, 3, 1)
  check(nil, nil, 1, 1, 3)
end


do return false end -- not tested yet

local minet = loader.requireApi("minet")
local persist = loader.requireApi("persistency")
local position = loader.requireApi("position")

fixes = {}

local function addFix(fix)
  table.insert(fixes, fix)
end


-- begin stolen from gps

local function trilaterate( A, B, C )

	local a2b = B.position - A.position
	local a2c = C.position - A.position

	if math.abs( a2b:normalize():dot( a2c:normalize() ) ) > 0.999 then
		return nil
	end

	local d = a2b:length()
	local ex = a2b:normalize( )
	local i = ex:dot( a2c )
	local ey = (a2c - (ex * i)):normalize()
	local j = ey:dot( a2c )
	local ez = ex:cross( ey )

	local r1 = A.distance
	local r2 = B.distance
	local r3 = C.distance

	local x = (r1*r1 - r2*r2 + d*d) / (2*d)
	local y = (r1*r1 - r3*r3 - x*x + (x-i)*(x-i) + j*j) / (2*j)

	local result = A.position + (ex * x) + (ey * y)

	local zSquared = r1*r1 - x*x - y*y
	if zSquared > 0 then
		local z = math.sqrt( zSquared )
		local result1 = result + (ez * z)
		local result2 = result - (ez * z)

		local rounded1, rounded2 = result1:round(), result2:round()
		if rounded1.x ~= rounded2.x or rounded1.y ~= rounded2.y or rounded1.z ~= rounded2.z then
			return result1, result2
		else
			return rounded1
		end
	end
	return result:round()

end

local function narrow( p1, p2, fix )
	local dist1 = math.abs( (p1 - fix.position):length() - fix.distance )
	local dist2 = math.abs( (p2 - fix.position):length() - fix.distance )

	if math.abs(dist1 - dist2) < 0.05 then
		return p1, p2
	elseif dist1 < dist2 then
		return p1:round()
	else
		return p2:round()
	end
end

-- end stolen from gps

function calculatePosition()
  if #fixes < 3 then return nil end
  local p1, p2
  for i=3,#fixes do
    if not p1 then
      p1, p2 = trilaterate( fixes[1], fixes[2], fixes[#fixes] )
	else
      p1, p2 = narrow( p1, p2, tFixes[#fixes] )
	  if not p2 then return p1 end
	end
  end
  return nil
end


-- Protocol implementation ------------------------------------------------

local proto = "galileo"

local function sendPosition()
  local cs = position.value.cs
  if cs.t=="l" then return end
  local pos = position.value.pos
  minet.sendMessage(minet.bcast, proto, {cs={cs.t, cs.id}, pos={pos.x, pos.y, pos.z}})
end

function setPosition(cstype, csid, pos)
  location.value.cs = {cstype, csid}
  location.value.pos = pos
  location:store()
  sendPosition()
end

local function receivePosition(header, payload)
  if payload.cs[1]~="g" then return end  -- for now only global coordinate system
  local pos = payload.pos
  local fix = {id=header.src, position=vector.new(pos[1], pos[2], pos[3]), distance = header.distance}
  addFix(fix)
  local myPos = calculatePosition()
  if not myPos then return end
  setPosition("g", 0, myPos)
end


-- Initialization --------------------------------------------------------

minet.receiveProtocol[proto]:add(receivePosition)
