-- Routing Table --------------------------------------------

local table = loader.require.table
local object = loader.require.object
local func = loader.require.func

local class, inst = object:createSubclass("routingtable")
loader.installAsApi(class)

function inst:getRoute(dst)
  return self.gateways[dst]
end

local function contains(map, val)
  for _, v in pairs(map) do
    if v==val then return true end
  end
  return false
end

function inst:getRouteInt(dst)
  if self.myID==dst then return dst, nil end
  if self.routingDistMaps[dst] then return dst, {} end
  local hops
  local node
  for n, map in pairs(self.routingDistMaps) do
    local nhops = map[dst]
    if nhops and not contains(nhops, self.myID) and (not hops or #nhops<#hops) then
      node,hops = n, nhops
    end
  end
  return node, hops
end

local function append(t, value)
  if not t then return {} end
  t = table.clone(t)
  table.insert(t, value)
  return t
end

function inst:updateRoutingTable(changes)
  local changed = false
  local function assign(table, key, value, eq)
    if eq(table[key], value) then return end
    changed = true
    table[key] = value
  end
  for dst, _ in pairs(changes) do
    local node, hops = self:getRouteInt(dst)
    if node then hops = append(hops, node) end
    assign(self.gateways, dst, node, func.__eq)
    assign(self.hops, dst, hops, table.equals)
  end
  return changed
end

function inst:routingMarkChanges(changes, distMap)
  if not distMap then return end
  for node, _ in pairs(distMap) do
    changes[node] = true
  end
end

function inst:addRouting(node, distMap)
  local changes = {[node]=true}
  self:routingMarkChanges(changes, self.routingDistMaps[node])
  self.routingDistMaps[node] = distMap
  self:routingMarkChanges(changes, distMap)
  local changed = self:updateRoutingTable(changes)
  return changed
end

function inst:removeRouting(node)
  self:addRouting(node, nil)
end

function inst:init(myID)
  self.myID = myID
  -- for each destination store next hop and number of hops to destination
  self.gateways = {}
  self.hops = {}
  -- for each node a mapping from dst to hops
  self.routingDistMaps = {}
  self:updateRoutingTable({[myID]=true})
end

local test = lunit.new(class)

-- test network
-- 6 - 1 - 5 - 4
-- 6 - 2 - 5 - 3
--     2 ----- 3
-- node 6 is new
-- 1) add 6 - 1
-- 2) add 6 - 2
-- 3) remove 5 - 3

function test.routing()
  local rt = class(6)
  local function check(dest, expected, hops)
    lunit.areEqual(expected, rt:getRoute(dest))
    if hops then lunit.areEqual(hops, rt.hops[dest]) end
  end
  check(6, 6, {})
  check(1)
  check(2)
  lunit.areEqual(true, rt:addRouting(1, {[2]={5}, [3]={5}, [4]={5}}))
  check(1, 1, {1})
  check(2, 1, {5, 1})
  check(3, 1, {5, 1})
  lunit.areEqual(true, rt:addRouting(2, {[3]={}, [4]={5}, [7]={6}}))
  check(1, 1, {1})
  check(2, 2, {2})
  check(3, 2, {2})
  check(4, 1, {5, 1})
  check(7)
  lunit.areEqual(false, rt:addRouting(1, {[2]={5}, [4]={5}, [3]={2, 5}}))
  check(1, 1, {1})
  check(2, 2, {2})
  check(3, 2, {2})
  check(4, 1, {5, 1})
end
