-- Class Functionality

-- Purpose:
--   provide a root class "object" that can be derived from
--   Classes have the functions inherited from the object class:
--     instance = class:new(...)
--     subClass = class:createSubclass(name)
--     name = class:getClassName()
--     superClass = class:getSuper()
--   Instances have the functions inherited from object
--     object:getClass()

--   To make your own class:
--     local class, instance = object.createSubclass("myClass")
--     function class:myClassMethod() end
--     function instance:myInstanceMethod() end
--     function instance:init(...) initialize class end

local function createVTable(class)
  local mt = {}
  local vt = {}
  mt.__index = vt
  function vt.getClass() return class end
  class._metatable = mt
  return vt, mt
end

local function createInstanceFromClass(class)
  local inst = {}
  return setmetatable(inst, class._metatable)
end

local metaclass = {}
local metaclassvt = createVTable(metaclass)
function metaclassvt:getSuper()
  return self.super
end
function metaclassvt:getClassName()
  return self.className
end
function metaclassvt:new(...)
  o = createInstanceFromClass(self)
  if o.init then o:init(...) end
  return o
end

local object = createInstanceFromClass(metaclass)
object.className = "object"
local objectvt = createVTable(object)
function object:createSubclass(name)
  local class = createInstanceFromClass(metaclass)
  local vt, mt = createVTable(class)
  class.className = name
  class.super = self
  vt.super = self._metatable.__index
  table.copyNoOverwrite(self, class)
  table.copyNoOverwrite(self._metatable, mt)
  table.copyNoOverwrite(self._metatable.__index, vt)
  return class, vt, mt
end

local test = {}
object.__lunit = test

function test.object()
  lunit.areEqual("object", object:getClassName())
  lunit.areEqual(nil, object:getSuper())
  lunit.areSame(metaclass, object:getClass())
end
function test.instance()
  local o = object:new()
  lunit.areSame(object, o:getClass())
  local o2 = object:new()
  lunit.areSame(true, o~=o2)
end
function test.subclass()
  local x, vt = object:createSubclass("x")
  function vt:init(a) self.val = a end
  lunit.areEqual("x", x:getClassName())
  lunit.areSame(object, x:getSuper())
  local o = x:new(4)
  lunit.areSame(x, o:getClass())
  lunit.areEqual(4, o.val)
end
function test.subSubClass()
  local x, vt = object:createSubclass("x")
  function vt:init(a) self.x = a end
  function vt:test() return 1 end
  local y, vt = x:createSubclass("y")
  function vt:init(a) self.y = a; self.super.init(self, a) end
  function vt:test() return 2 end
  local o = y:new(2)
  lunit.areEqual(2, o.x)
  lunit.areEqual(2, o.y)
  lunit.areEqual(2, o:test())
end

loader.installAsApi(object)
