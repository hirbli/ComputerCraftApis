-- Class Functionality

-- Purpose:
--   provide a root class "object" that can be derived from
--   Classes have the functions inherited from the object class:
--     instance = class:new(...)
--     subClass = class:createSubclass(name)
--     name = class:getClassName()
--     superClass = class:getSuper()
--   Instances have the functions inherited from object
--     object:getClass()

--   To make your own class:
--     local class, instance = object.createSubclass("myClass")
--     function class:myClassMethod() end
--     function instance:myInstanceMethod() end
--     function instance:init(...) initialize class end

local table = loader.require.table

-- helpers for creating indexed objects ------------------------------

local function doRedir(op, self, ...)
  local target = getmetatable(self).target
  return getmetatable(target)[op](target, ...)
end

local function wrapIndexerObject(object)
  local redir = {}
  redir.target = object
  function redir.__index(...) return doRedir('index', ...) end
  function redir.__newindex(...) return doRedir('newindex', ...) end
  local vt = getmetatable(object)
  for name, func in pairs(vt) do
    if string.match(name, "^__") and type(func)=="function" then
      redir[name] = function(...) return doRedir(name, ...) end
    end
  end
  return setmetatable({}, redir)
end

-- Class / Instance Relation -----------------------------------

local function createVTable(class)
  local vt = {}
  vt.__index = vt
  function vt.getClass() return class end
  class._vtable = vt
  return vt
end

local function createInstanceFromClass(class)
  local vtable = class._vtable
  if vtable.__index ~= vtable or vtable.__newindex ~= nil then
    error("do not overwrite __index or __newindex, use index and newindex instead.")
  end
  local inst = {}
  return setmetatable(inst, vtable)
end

-- Metaclass the Class of All Classes ---------------------------

local metaclass = {}
local metaclassvt = createVTable(metaclass)
function metaclassvt:getSuper()
  return self.super
end
function metaclassvt:getClassName()
  return self.className
end
function metaclassvt:new(...)
  local o = createInstanceFromClass(self)
  local init = self._vtable.init
  if init then init(o, ...) end
  if self._vtable.index then
    return wrapIndexerObject(o)
  end 
  return o
end
metaclassvt.__call = metaclassvt.new

-- Object, the Superclass of All Classes --------------------------

local object = createInstanceFromClass(metaclass)
object.className = "object"
local objectvt = createVTable(object)
function object:createSubclass(name)
  local class = createInstanceFromClass(metaclass)
  local vt = createVTable(class)
  class.className = name
  class.super = self
  vt.super = self._vtable.__index
  table.copyNoOverwrite(self, class)
  table.copyNoOverwrite(self._vtable, vt)
  return class, vt
end

-- Testing ---------------------------------------------------------

local test = lunit.new(object)

function test.object()
  lunit.areEqual("object", object:getClassName())
  lunit.areEqual(nil, object:getSuper())
  lunit.areSame(metaclass, object:getClass())
end

function test.instance()
  local o = object:new()
  lunit.areSame(object, o:getClass())
  local o2 = object:new()
  lunit.areSame(true, o~=o2)
  local o3 = object()
  lunit.areSame(object, o3:getClass())
end

function test.subclass()
  local x, vt = object:createSubclass("x")
  function vt:init(a) self.val = a end
  lunit.areEqual("x", x:getClassName())
  lunit.areSame(object, x:getSuper())
  local o = x:new(4)
  lunit.areSame(x, o:getClass())
  lunit.areEqual(4, o.val)
end

function test.subSubClass()
  local x, vt = object:createSubclass("x")
  function vt:init(a) self.x = a end
  function vt:test() return 1 end
  local y, vt = x:createSubclass("y")
  function vt:init(a) self.y = a; self.super.init(self, a) end
  function vt:test() return 2 end
  local o = y:new(2)
  lunit.areEqual(2, o.x)
  lunit.areEqual(2, o.y)
  lunit.areEqual(2, o:test())
end

function test.indexer()
  local x, vt = object:createSubclass("x")
  function vt:init(inc) self.table = {}; self.inc = inc end
  function vt:index(key) return self.table[key] end
  function vt:increment(value) return value+self.inc end
  function vt:newindex(key, value) self.table[key]=self:increment(value) end
  local o = x:new(1)
  lunit.areSame(nil, o['table'])
  o.table = 15
  lunit.areSame(16, o.table)
  local y, vty = object:createSubclass("y")
  lunit.areSame(false, y==x)
  lunit.areSame(false, vty==vt)
  local yo = y:new()
  lunit.areSame(nil, yo[index])
end

function test.newInNew()
  local x, vtx = object:createSubclass'x'
  local y, vty = object:createSubclass'y'
  function vty:init() self.x = x:new() end
  function vty:test() end
  local o = y:new()
  o:test()
end  

loader.installAsApi(object)
