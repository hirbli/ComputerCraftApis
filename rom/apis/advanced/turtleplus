-- Turtle Plus

-- Purpose:
--   Extend the turtle API with the following features:
--   Tracking of position
--   Cooperation with position API (update position, interrupt galileo service while moving)
--   Events for noting position changes
--   additional getSelectedSlot() returns last slot selected by API

if not turtle then return false end

local position = loader.require.position
local table = loader.require.table
local event = loader.require.event
local tx = loader.require.transformation

local moved = event:new()
local turned = event:new()

local dirVectors = {
  forward = vector.new(1, 0, 0),
  back = vector.new(-1, 0, 0),
  up = vector.new(0, 1, 0),
  down = vector.new(0, -1, 0)
}

local function wrapMove(move, name)
  local t = tx:move(dirVectors[name])
  return function()
    position.startMoving(t)
    local ret = move()
    position.stopMoving(ret)
    if ret then moved:call() end
    return ret
  end
end

local turnDirections = {turnLeft=1, turnRight=3}

local function wrapTurn(turn, name)
  local t = tx:turn(turnDirections[name])
  return function()
    position.startMoving(t)
    local ret = turn()
    position.stopMoving(ret)
    if ret then turned:call() end
    return ret
  end
end

local selectedSlot

local function wrapSelect(select)
  return function(slot)
    selectedSlot = slot
    select(slot)
  end
end

local function getSelectedSlot()
  return selectedSlot
end



local api = table.clone(turtle)
api.nativeTurtle = turtle

local function wrap(wrapper, funcnames)
  for i, name in ipairs(funcnames) do
    api[name] = wrapper(api[name], name)
  end
end

wrap(wrapMove, {"forward", "back", "up", "down"})
wrap(wrapTurn, {"turnLeft", "turnRight"})
wrap(wrapSelect, {"select"})
api.moved = moved
api.turned = turned
api.getSelectedSlot = getSelectedSlot

rawset(_G, "turtle", api)
