-- Array - a multi dimensional array indexed by array-tables or vectorx


local object = loader.require.object
local iterator = loader.require.iterator
local table = loader.require.table
local func = loader.require.func

local class, inst = object:createSubclass("array")
loader.installAsApi(class)


local function makeKey(index)
  return index
end

local function breakKey(key)
  return key
end


function inst:newindex(index, value)
  local x = self.array
  local key = makeKey(index)
  for i=1, #key-1 do
    local v = key[i]
    local xx = x[v]
    if xx==nil then xx={}; x[v]=xx end
    x = xx
  end
  x[key[#key]] = value
end

function inst:index(index)
  local x = self.array
  for i, v in ipairs(makeKey(index)) do
    x = x[v]
    if x==nil then return nil end
  end
  return x
end

function inst:init(ndim)
  assert(type(ndim)=="number", "must specify an integer number of dimensions.")
  self.array = {}
  self.ndim = ndim
end

local function kvToVector(key, val)
  return breakKey(key), val
end


function inst:__pairs()
  local index = {}
  local dim = self.ndim
  local function recurseKeys(depth, x)
    depth = depth + 1
    for k, v in pairs(x) do
      index[depth] = k
      if depth == dim then
        coroutine.yield(table.clone(index), x)
      else
        recurseKeys(depth, v)
      end
    end
  end
  local function startKeys()
    recurseKeys(0, self.array)
  end
  return coroutine.wrap(startKeys)
end

class.volume, volume = class:createSubclass'volume'

function volume:init()
  self.super.init(self, 3)
end


local test = lunit.new(class)

function test.setandget()
  local a = class(2)
  for i=-1,2 do
    for j=-2,1 do
      local v = {i, j}
      a[v] = i*10+j
    end
  end
  for i=-1,2 do
    for j=-2,1 do
      local v = {i, j}
      lunit.areEqual(i*10+j, a[v])
    end
  end
  lunit.areSame(nil, a[{100, 0}])
  lunit.areSame(nil, a[{0, 100}])
  local count = 0
  for k, v in pairs(a) do
    lunit.areEqual(k[1]*10+k[2], a[k])
    count = count + 1
  end
  lunit.areEqual(16, count)
  a[{0, 0}] = nil
  lunit.areSame(nil, a[{0, 0}])
  lunit.areEqual(15, func.count(iterator.keys(a)))
end
