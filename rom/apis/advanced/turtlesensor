-- Turtle Sensor

-- Purpose:
--   Find out as much as possible about the environment of the turtle.
--   Registers with the move / turn events to trigger sensing.

if not turtle then return false end

loader.requireApi("turtleplus")
local turtle = turtle
local rednet = rednet
local peripheral = peripheral
local tx = loader.requireApi("transformation")
local position = loader.requireApi("position")
local event = loader.requireApi("event")


-- Sensing blocks based on peripheral type -------------------------------

local function sensePeripherals(side)
  local device = peripheral.getType(side)
  -- on turtle the modem is part of the turtle block and hides the block behind
  if turtle and device=="modem" then return nil end
  return device
end

-- Sensing blocks by comparing against inventory -------------------------

local compareFunc = {
  top=turtle.compareUp,
  bottom=turtle.compareDown,
  front=turtle.compare
}

local function compareBlockInt(compare)
  for slot=1,9 do
    turtle.select(slot)
    if compare() then return slot end
  end
  return
end

local function compareBlock(side)
  local compare = compareFunc[side]
  if not compare then return end
  local oldSlot = turtle.getSelectedSlot()
  local result = compareBlockInt(compare)
  turtle.select(oldSlot)
  return result
end

-- Sensing presence of blocks --------------------------------------------

local detectFunc = {
  top=turtle.detectUp,
  bottom=turtle.detectDown,
  front=turtle.detect
}

local function detectBlock(side)
  local detectFunc = detectFunc[side]
  if not detectFunc then return nil end
  return detectFunc()
end

-- Combining Sense Results ----------------------------------------------

local function senseBlock(side)
  local detect = detectBlock(side)
  if not detect then return false end
  detect = compareBlock(side)
  return detect or true
end

local function senseInt(side)
  local result = sensePeripherals(side)
  if result then return result end
  return senseBlock(side)
end

local function sense(side)
  local result = senseInt(side)
  return result
end

blockSensed = event:new()

local function senseAll()
  for side, offset in pairs(position.sideVectors) do
    local result = sense(side)
    if result ~= nil then
      local v = position.getCurrent() + offset
      blockSensed:call(v, result)
    end
  end
end

local function printSenseResult(v, result)
  if result then
    print("sense("..v.x..","..v.y..","..v.z..")="..tostring(result))
  end
end

-- blockSensed:add(printSenseResult)

turtle.moved:add(senseAll)
turtle.turned:add(senseAll)
