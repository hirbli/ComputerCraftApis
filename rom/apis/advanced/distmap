local object = loader.require.object
local volume = loader.require.volume
local func = loader.require.func

local class, inst = object:createSubclass'distmap'
loader.installAsApi(class)

function inst:init(origin, occupy)
  self.origin = origin
  self.occupy = occupy
  self.size = 1
  self.distance = volume:new()  -- map vector --> distance
  local v = volume:new()
  v[origin] = false
  self.field = {v}              -- map distance --> vector --> direction
  self.distance[origin] = 1
end

local directions = {
  vector.new(1, 0, 0),
  vector.new(-1, 0, 0),
  vector.new(0, 1, 0),
  vector.new(0, -1, 0),
  vector.new(0, 0, 1),
  vector.new(0, 0, -1)
}

function inst:growOne()
  local size = self.size + 1
  local field = volume:new()
  local dist = self.distance
  for v, _ in pairs(self.field[size-1]) do
    for _, d in ipairs(directions) do
      local n = v + d
      if not self.occupy(n) and not dist[n] then
        dist[n] = size
        field[n] = d
      end
    end
  end
  self.field[size] = field
  self.size = size
end

function inst:shrinkOne()
  local size = self.size
  for v, _ in pairs(self.field[size]) do
    self.distance[v] = nil
  end
  self.field[size] = nil
  self.size = size - 1
end

function inst:getStep(source)
  return self.field[self.distance[source]][source]
end

function inst:getPath(source)
  local dist = self.distance[source]
  if not dist then return end
  local path = {}
  local field = self.field
  while dist > 1 do
    local dir = field[dist][source]
    table.insert(path, dir)
    source = source - dir
    dist = dist - 1
  end
  return path
end

function inst:growTo(v)
  while not self.distance[v] do
    self:growOne()
  end
end

function inst:shrinkTo(v)
  if self.distance[v] == 1 then error("cant remove origin") end
  while self.distance[v] do
    self:shrinkOne()
  end
end

local function vectorLessEqual(a, b)
  return a.x<=b.x and a.y<=b.y and a.z<=b.z
end

function box(lowerCorner, upperCorner, inside, outside)
  return function(v)
    local i = vectorLessEqual(lowerCorner, v) and vectorLessEqual(v, upperCorner)
    if i then return inside else return outside end
  end
end

local test = lunit.new(class)
local func = loader.require.func

function test.box()
  local lc = vector.new(1, 2, 3)
  local uc = vector.new(4, 4, 4)
  local b = box(lc, uc, 1, 0)
  lunit.areSame(1, b(lc))
  lunit.areSame(1, b(uc))
  lunit.areSame(0, b(uc + vector.new(1, 0, 0)))
end

function test.emptyRoom()
  local dm = class:new(vector.new(0, 0, 0), func.const(false))
  lunit.areEqual(1, dm.size)
  lunit.areEqual(1, dm.distance[vector.new(0, 0, 0)])
  lunit.areEqual(false, dm.field[1][vector.new(0, 0, 0)])
  dm:growOne()
  lunit.areEqual(2, dm.size)
  lunit.areEqual(1, dm.distance[vector.new(0, 0, 0)])
  lunit.areEqual(2, dm.distance[vector.new(1, 0, 0)])
  dm:shrinkOne()
  lunit.areEqual(1, dm.size)
  local path = dm:getPath(vector.new(1, 1, 2))
  lunit.areSame(nil, path)
  dm:growOne()
  dm:growOne()
  dm:growOne()
  dm:growOne()
  lunit.areEqual(5, dm.size)
  local path = dm:getPath(vector.new(1, 1, 2))
  lunit.areEqual(4, #path)
  lunit.areEqual(vector.new(1, 1, 2), func.reduce(func.fadd)(path))
end

function test.wall()
  local wall = box(vector.new(-2, 2, -2), vector.new(2, 2, 2), true, false)
  local dm = class:new(vector.new(0, 0, 0), wall)
  local path
  local target = vector.new(0, 4, 0)
  dm:growTo(target)
  path = dm:getPath(target)
  lunit.areEqual(10, #path)
  lunit.areEqual(11, dm.size)
  lunit.areEqual(target, func.reduce(func.fadd)(path))
end
