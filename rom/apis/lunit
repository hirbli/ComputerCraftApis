local function errorStack(msg)
  return debug.traceback(msg)
end

function areSame(expected, actual)
  if expected == actual then return end
  error("Values not equal: expected="..tostring(expected)..", actual="..tostring(actual))
end

function areEqual(expected, actual)
  if type(expected)==type(actual) and type(expected)=="table" then
    for k, v in pairs(expected) do
      local a = actual[k]
      if a == nil then error("missing table entry "..k) end
      local success, msg = pcall(areEqual, v, a)
      if not success then
        error("In table entry "..k..":\n"..msg)
      end
    end
    for k, v in pairs(actual) do
      if expected[k]==nil then error("extraneous table entry "..k) end
    end
  else
    areSame(expected, actual)
  end
end

function countFunction()
  local table = {count=0}
  function table.func() table.count = table.count + 1 end
  return table
end

local passCount
local failCount

local function runTest(name, func)
  if false then
    print(name)
    func()
  else
    io.output():write(name..':')
    local success, msg = xpcall(func, errorStack)
    if success then
      print(' pass')
      passCount = passCount + 1
    else
      failCount = failCount + 1
      print(' FAIL')
      print(msg)
    end
  end
end

local function runTests(table, path)
  for k, v in pairs(table) do
    if type(k)=="string" and type(v)=="function" then
      runTest(path.."."..k, v)
    end
  end
end

local function runTable(table, discovered, path)
  discovered[table] = true
  for k, v in pairs(table) do
    if type(k) == "string" and type(v) == "table" and not discovered[v] then
      discovered[table] = true
      if k=="__lunit" then
        runTests(v, path)
      elseif k~="super" then
        runTable(v, discovered, path.."."..k)
      end
    end
  end
end

function new(table)
  table = table or _G
  local test = {}
  table.__lunit = test
  return test
end

function run(start)
  passCount = 0
  failCount = 0
  if not start then
    runTable(_G, {}, "_G")
  elseif type(start)=="table" then
    runTable(start, {}, "")
  else
    error("start must be nil or a table")
  end
  print('Result: total='..(passCount+failCount)..', pass='..passCount..', fail='..failCount..'.')
end
